## Starting out 

First and foremost was the design and interpretation of the project, so as to grasp what was actually being asked
I initially sketched out what it would look like in plain Java, not as a web appplication/RESTful API, without any use of Web Frameworks.
The simple design is just to have 3-4 Classes:
  -A Main class to initiate the program.
  -An Application class to simulate the web requests
      -This class would have a menu to prompt the user for what they wish to do, and 2 arrayLists or HashMaps to 
      hold all Organizations and Users.
      -This class would simply loop, asking the user for what the wish to do every time, exiting when stated so by the user.
      It also has the accessory functions that will go through and search for Usersor Organizations, to remove a member from 
      their map field.
  -A User Class
  -An Organization Class
  
  Aside from the fields requested, both User and Organization would have a hashmap of the opposing class, so as to form the
  proper connection of a user being a member and vice versa.


## Choosing a Java Web Framework

Since you can do the program in such a large variety of ways, this area was up to choice I believe. 
I ultimately chose Spring since it is a Java Framework that is fairly popular and I have not worked with previously.

## Goals

Developing the program was simply a way to meet the same functionality as the basic version of the program, but to improve upon
it when designing specifically for web. This means using Data Transfer Objects to assist calls, using the restful architectural style, etc.

## Things that could have been improved in my program.

Unfortunately, I was not able to get the entirety of the requested instructions completed. 
If I were able to have cleared all errors in a timely manner, there are more elegant ways of doing things.
Utilizing a relational database, through mySQL for example, could simplify the work of relating various objects. The HTTP Requests
good then correspond to SQL queries to modify the data. This would most likely lead to more flexible code and allow for automation
of functions that are currently done manually (such as removing someone from Organization by updating its data).
Adding functions for the missing features is also an important step. Being able to easily search, update, or remove portions of data
(such as uncoupling a User and Organization) is helpful.
Utilizing DTOs and improving the MVC design could also elevate the program.


## Final Thoughts

Overall though, working on the coding challenge was a beneficial experience and is definitely something to keep working towards. 
Spring Boot was interesting to play around with. 
I will be continuing to learn as much as I can and improve my skills with these Java Web Frameworks.
